@using System.Web.UI.HtmlControls
@using eStore.Models
@using Microsoft.Ajax.Utilities
@using HtmlHelper = System.Web.WebPages.Html.HtmlHelper
@using Microsoft.AspNet.Identity;
@model eStore.Models.Auction
@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";

    string userId = "";
    string user = "";
    if (Request.IsAuthenticated && !User.IsInRole(RoleName.MaintenanceManager))
    {
        userId = User.Identity.GetUserId();
        user = User.Identity.GetUserName();
    }
}

<h2>Auction details</h2>
@if (Request.IsAuthenticated && !User.IsInRole(RoleName.MaintenanceManager))
{
    <div>
        <div id="tokens" style="float: left;">@ViewBag.NumOfTokens</div>&nbsp;&nbsp;
        <img src="~/images/token.png" />
    </div>

}
<hr />

<div class="row">
    <div class="col-sm-4">
        @{
            string imreBase64Data = Convert.ToBase64String(@Model.Image);
            string imgDataUrl = string.Format("data:image/png;base64,{0}", imreBase64Data);
            long time = 0;
            if (Model.State == AuctionState.Opened)
            {
                time = (long)(((DateTime)Model.DateTimeOpened).Ticks - DateTime.Now.Ticks) / TimeSpan.TicksPerMillisecond + Model.Duration * 1000;
            }
        }
        <img src="@imgDataUrl" style="width:100%" />
    </div>
    <div class="col-sm-8">
        <table class="table table-dark table-hover table-striped table-bordered">
            <tr>
                <td>@Html.DisplayNameFor(m => m.Name)</td>
                <td>@Model.Name</td>
            </tr>
            <tr>
                <td>Owner</td>
                <td>@Model.User.Email</td>
            </tr>
            <tr>
                <td>State</td>
                <td>
                    @if (Model.State == AuctionState.Ready)
                    {
                        <span class="label label-default">@Model.State</span>
                    }
                    else if (Model.State == AuctionState.Opened)
                    {
                        <span class="label label-success">@Model.State</span>
                    }
                    else
                    {
                        <span class="label label-danger">@Model.State</span>
                    }

                </td>
            </tr>
            @if (Model.State == AuctionState.Opened)
            {
                <tr>
                    <td>Remaining time:</td>
                    <td><text id="@Model.Id" time="@time"></text></td>
                </tr>
            }
            <tr>
                <td>Current price</td>
                <td id="price">@Model.CurrentPrice @Model.Currency</td>
            </tr>
            <tr>
                <td>
                    Last bidder:
                </td>
                @if (Model.LastBidder != null)
                {
                    <td id="bidder">@Model.LastBidder.UserName</td>
                }
                else
                {
                    <td id="bidder">No bidder</td>
                }
            </tr>
        </table>

        @if (Request.IsAuthenticated && !User.IsInRole(RoleName.MaintenanceManager) && (userId != Model.User.Id))
        {
                <div class="row">
                    <div class="col-sm-3 form-group">
                        @Html.Label("Number of tokens")
                        @Html.TextBox("numOfTokens", "", new { placeholder = "", @class = "form-control" })
                    </div>
                    @Html.Hidden("auctionId", Model.Id)
                    <div class="col-sm-1 form-group">
                        @Html.Label("   ")
                        <button class="btn btn-primary" onclick="bid(@Model.CurrentPrice)">Bid</button>
                    </div>
                </div>
        }
    </div>
</div>

<div class="row">
    <div class="col-sm-4">
        
    </div>
</div>


@section scripts
{
    <script>
        $(window).ready(function () {
            $(".active a").css("background-color", "#df691a");
            $("td text").each(function () {
                timer($(this).attr("id"), $(this).attr("time"));
            });
        });
    </script>

    <script type="text/javascript">
        var counter = 0;
        var array = new Array();

        function timer(id, time) {
            // Update the count down every 1 second
            if (time.charAt(0) == '-') {
                document.getElementById(id).innerHTML = "EXPIRED";
                return;
            }
            time = parseInt(time);
            time += new Date().getTime();
            var x = setInterval(function () { callBack(id, time, counter); }, 1000);
            array[counter++] = x;
        }




        function callBack(id, time, counter) {
            time = parseInt(time);
            var now = new Date().getTime();
            counter = parseInt(counter);

            // Find the distance between now and the count down date
            var distance = time - now;
            if (distance <= 0) {
                clearInterval(counter);
                document.getElementById(id).innerHTML = "EXPIRED";
                return;
            } else {
                // Time calculations for days, hours, minutes and seconds
                var days = Math.floor(distance / (1000 * 60 * 60 * 24));
                var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                var seconds = Math.floor((distance % (1000 * 60)) / 1000);

                // Display the result in the element with id="demo"
                document.getElementById(id).innerHTML = days + "d " + hours + "h " + minutes + "m " + seconds + "s ";
            }
            // If the count down is finished, write some text
        }


        function bid(currentPrice) {
            tokenValue = parseFloat(@ViewBag.tokenValue);
            var tokens = document.getElementById("tokens").innerHTML;
            tokens = parseFloat(tokens);
            currentPrice = parseFloat(currentPrice);
            var tokensNeeded = (currentPrice / tokenValue);
            //if (document.getElementById("bidder").innerHTML != "No bidder")
                //tokensNeeded++;
            var tokensToBid = document.getElementById("numOfTokens").value;
            if (isNaN(tokensToBid)) {
                bootbox.alert("You didn't enter appropriate value!",
                    function () { });
                return;
            }

            if (parseInt(tokensToBid) != parseFloat(tokensToBid)) {
                bootbox.alert("You need to enter integer value!",
                    function () {});
                return;
            }

            tokensToBid = parseFloat(tokensToBid);
            if (tokensToBid < 0) {
                bootbox.alert("You need to enter positive value!",
                    function () { });
                return;
            }
            else if ((tokensToBid == 0) && (document.getElementById("bidder").innerHTML != "No bidder")) {
                bootbox.alert("You need to enter positive value!",
                    function () { });
                return;
            }

            if (document.getElementById("bidder").innerHTML == "@user")
                tokensNeeded = tokensToBid;
            else
                tokensNeeded += tokensToBid;

            if (tokens < tokensNeeded) {
                //document.writeln(tokens + "   "  + tokensNeeded);
                bootbox.alert("You don't have enough tokens!",
                    function () { });
                return;
            }
            else {
                window.location.href = '@Url.Action("Create", "Bids")/?numOfTokens=' + tokensToBid + "&auctionId=@Model.Id";
            }

        }

    </script>
}